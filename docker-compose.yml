services:
  #####################
  # Postgres Database #
  #####################
  db:
    image: postgres:14-alpine
    container_name: django_db
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql #Establish Tables from DB init
    networks:
      - backend_net
    healthcheck:  # Ensures DB is ready before Django starts
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 15s
      timeout: 3s
      retries: 5

  #####################
  # Django Backend    #
  #####################
  backend:
    build: ./backend
    container_name: django_app
    env_file:
      - .env
    # Assure that DB Table connections are established and
    # Run the Django dev server on port 8000
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app  # Bind mount our backend code
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - OLLAMA_APP_API_URL=${OLLAMA_APP_API_URL}
    depends_on:
      db:
        condition: service_healthy  # Wait for PostgreSQL to be ready
    networks:
      - backend_net
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/').status"]
      interval: 30s
      timeout: 10s
      retries: 10

  #####################
  # React Frontend    #
  #####################
  frontend:
    build: ./frontend
    container_name: react_app
    env_file:
      - .env
    volumes:
      - ./frontend:/app
      - react_node_modules:/app/node_modules # Avoid conflicts with host node_modules
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_BASE=${REACT_APP_API_BASE}
    networks:
      - frontend_net
    command: npm start  # Explicitly set the start command
    stdin_open: true  # Keep container open for interactive mode
    tty: true
    depends_on:
      backend:
        condition: service_healthy  # Wait for Django backend to be ready

  #####################
  # Ollama AI Model   #
  #####################
  # ollama:
  #   build: ./LLM
  #   container_name: ollama
  #   env_file:
  #     - .env
  #   restart: unless-stopped
  #   volumes:
  #     - ollama_data:/root/.ollama
  #   ports:
  #     - "11434:11434"
  #   networks:
  #     - backend_net
  #   devices:
  #   - /dev/dri # Required for Intel & AMD GPUs
  #   environment: #Allows the service to take advantage of GPU resorces
  #   - NVIDIA_VISIBLE_DEVICES=all # Enables Nvidia GPUs
  #   - NVIDIA_DRIVER_CAPABILITIES=compute,utility
  #   - ROC_ENABLE_PRE_VEGA=1 # Enables AMD ROCm support (for older AMD GPUs)
  #   - OLLAMA_USE_METAL=1 # Enables Apple Metal GPU support
  #   deploy:
  #       resources:
  #         reservations:
  #           devices:
  #             - driver: nvidia
  #               count: all
  #               capabilities: [compute, utility]

networks:
  backend_net:
  frontend_net:

volumes:
  db_data:
  ollama_data:
  react_node_modules: