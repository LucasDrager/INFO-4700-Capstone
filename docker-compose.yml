services:
  #####################
  # Postgres Database #
  #####################
  db:
    image: postgres:14-alpine
    container_name: django_db
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mysecretpassword
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend_net

  #####################
  # Django Backend    #
  #####################
  backend:
    build: ./backend
    container_name: django_app
    # Run the Django dev server on port 8000
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app  # Bind mount our backend code
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mysecretpassword
      - POSTGRES_HOST=db
    depends_on:
      - db
    networks:
      - backend_net

  #####################
  # React Frontend    #
  #####################
  frontend:
    build: ./frontend
    container_name: react_app
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Avoid conflicts with host node_modules
    ports:
      - "3000:3000"
    networks:
      - frontend_net
    command: npm start  # Explicitly set the start command
    stdin_open: true  # Keep container open for interactive mode
    tty: true

  #####################
  # Ollama AI Model   #
  #####################
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - backend_net
    runtime: nvidia
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        ollama pull deepseek-r1:14b
        ollama serve


networks:
  backend_net:
  frontend_net:

volumes:
  db_data:
  ollama_data: