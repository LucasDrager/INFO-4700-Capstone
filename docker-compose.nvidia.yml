services:
  #####################
  # Postgres Database #
  #####################
  db:
    image: postgres:14-alpine
    container_name: django_db
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/application/migrations:/app/application/migrations # Ensure migrations are in sync with the host
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql #Establish Tables from DB init
    networks:
      - backend_net
    healthcheck:  # Ensures DB is ready before Django starts
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 15s
      timeout: 3s
      retries: 5

  #####################
  # Django Backend    #
  #####################
  backend:
    build: ./backend
    container_name: django_app
    env_file:
      - .env
    volumes:
      - django_media:/app/media
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - OLLAMA_APP_API_URL=${OLLAMA_APP_API_URL}
    depends_on:
      db:
        condition: service_healthy  # Wait for PostgreSQL to be ready
    networks:
      - backend_net
    # Assure that DB Table connections are established and ready before Django starts
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/').status"]
      interval: 30s
      timeout: 10s
      retries: 100

  #####################
  # React Frontend    #
  #####################
  frontend:
    build: ./frontend
    container_name: react_app
    env_file:
      - .env
    volumes:
      - react_node_modules:/app/node_modules # Avoid conflicts with host node_modules
      - react_app:/app/build # Ensure build is in sync with the host
    ports:
      - "80:3000"
    environment:
      - REACT_APP_API_BASE=${REACT_APP_API_BASE}
    networks:
      - frontend_net
      - backend_net
    stdin_open: true  # Keep container open for interactive mode
    tty: true
    depends_on:
      backend:
        condition: service_healthy  # Wait for Django backend to be ready

  #########################
  # Open WebUI            #
  #########################
  webui:
    container_name: open_webui
    image: ghcr.io/open-webui/open-webui:main
    ports:
      - "8080:8080"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434 
    networks:
      - backend_net
    depends_on:
      - backend
      - db

  #####################
  #  Ollama AI Model  #
  #####################
  ollama:
    build: ./LLM
    container_name: ollama
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - backend_net
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]  # Allocate all GPUs
  
  #####################
  #    Ngix routing   #
  # #####################
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx_proxy
  #   ports:
  #     - "80:80"  # Expose to the world
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - react_app:/app/build:ro
  #     - django_media:/app/media:ro
  #   depends_on:
  #     - frontend
  #     - backend
  #   networks:
  #     - frontend_net
  #     - backend_net

volumes:
  db_data:
  ollama_data:
  react_node_modules:
  django_media:
  static_volume:
  react_app:

networks:
  backend_net:
  frontend_net:
